<?php
/**
 * Imports and exports data from a CSV file into WordPress.
 *
 * ## EXAMPLES
 *
 *     # Import data from books.csv
 *     $ wp csv import books.csv
 *     Success: Imported 102 records
 *
 *     # Execute a dry run
 *     $ wp csv import --dry-run books.csv
 *     Success: Import should be successful
 *
 * @package wp-cli
 */

WP_CLI::add_command( 'csv', 'CSVCommands' );
ini_set( 'auto_detect_line_endings', '1' );

/**
 * Class Import CSV
 */
class CSVCommands extends WP_CLI_Command {

	/**
	 * Import file name
	 *
	 * @var string
	 */
	public $filename = null;

	/**
	 * Post author
	 *
	 * @var string|integer
	 */
	public $author = null;

	/**
	 * Post status
	 *
	 * @var string
	 */
	public $status = 'publish';

	/**
	 * Import post type
	 *
	 * @var string
	 */
	public $post_type = null;

	/**
	 * Import taxonomy
	 *
	 * @var string
	 */
	public $taxonomy = null;

	/**
	 * Dry run without updating WordPress
	 *
	 * @var boolean
	 */
	public $dry_run = false;

	/**
	 * Number of records from CSV file to process during dry run
	 *
	 * @var boolean
	 */
	public $dry_run_n = 10;

	/**
	 * Prepending thumbnail path
	 *
	 * @var string
	 */
	public $thumbnail_base_url = '';

	/**
	 * Does CSV has a header
	 *
	 * @var string
	 */
	public $csv_header = true;

	/**
	 * Strict mode
	 *
	 * @var boolean
	 */
	public $csv_strict = false;

	/**
	 * Delimiter - fgetcsv
	 *
	 * @var string
	 */
	public $csv_delim = ',';

	/**
	 * Enclosure - fgetcsv
	 *
	 * @var string
	 */
	public $csv_enclosure = '"';

	/**
	 * Escape - fgetcsv
	 *
	 * @var string
	 */
	public $csv_escape = '\\';

	// phpcs:disable
	private function logInfo( $var ) {
		if ( is_array( $var ) || is_object( $var ) ) {
			error_log( print_r( $var, true ) );
		} else {
			error_log( $var );
		}
	}
	// phpcs:enable

	// phpcs:disable
	/**
	 * Imports data from a CSV file into WordPress
	 *
	 * ## OPTIONS
	 *
	 * <file>
	 * : The CSV file from which to import data. Required.
	 *
	 * --type=<post_type|taxonomy>
	 * : The import type to be used for inserting data. Required.
	 *
	 * --name=<name>
	 * : The name of the import type. Required.
	 *
	 * [--mapping=<mapping_file>]
	 * : A JSON file describing the header mappings. If not given, you should use `csv_commands_mappings` filter to provide mappings.
	 *
	 * [--dry-run[=<n>]]
	 * : Turn on dry run mode. Processes `n` records if given. Defaults to 10. No updates to WordPress takes place.
	 *
	 * [--author=<author>]
	 * : The user ID or username.
	 *
	 * [--status=<status>]
	 * : The post status. Defaults to `publish`.
	 *
	 * [--verbose]
	 * : Turn on verbose mode.
	 *
	 * [--thumbnail-base-url=<thumbnail_base_url>]
	 * : URL part to thumbnails.
	 *
	 * [--header]
	 * : Does the CSV has a header row? Defaults to true. If set to false, header names are autogenerated
	 * in the form of 'C1', 'C2' etc.
	 *
	 * [--strict]
	 * : Reject lines where the number of fields do not match the header. Defaults to false.
	 *
	 * [--delimiter=<delimiter>]
	 * : The CSV file delimiter. Defaults to ','.
	 *
	 * [--enclosure=<enclosure>]
	 * : The CSV file enclosure for fields. Defaults to '"'.
	 *
	 * [--escape=<escape>]
	 * : The CSV file escape character. Defaults to '\\'.
	 *
	 * ## EXAMPLES
	 *
	 *     # Import quotes from a CSV with given mapping JSON
	 *     $ wp csv import --type=post_type --name=post --mapping=quotes.json quotes.json
	 *     Success: Wrote 10 records.
	 *
	 * @subcommand import
	 */
	public function import( $args, $assoc_args ) {
		$this->process_arguments( $args, $assoc_args );
		if( null !== $this->post_type ) {
			include_once( 'class-importposts.php' );
			$import_posts = new ImportPosts( $this );
			$import_posts->import();			
		} else {
			include_once( 'class-importterms.php' );
			$import_terms = new ImportTerms( $this );
			$import_terms->import();			
		}
	}
	// phpcs:enable

	/**
	 * Process the given command arguments
	 *
	 * @param array $args array command arguments.
	 * @param array $assoc_args associative command arguments.
	 * @return void
	 */
	private function process_arguments( $args, $assoc_args ) {

		if ( isset( $assoc_args['thumbnail-base-url'] ) ) {
			if ( filter_var( $assoc_args['thumbnail-base-url'], FILTER_VALIDATE_URL ) === false ) {
				WP_CLI::error(
					sprintf(
						// translators: 1: --thumbnail-base-url argumnet.
						__( 'Argument Error: Thumbnail URL %s is invalid.', 'wp-cli-csv-commands' ),
						$assoc_args['thumbnail-base-url']
					)
				);
			}
			$this->thumbnail_base_url = $assoc_args['thumbnail-base-url'];
		}

		if ( isset( $assoc_args['author'] ) && $this->is_string_an_int( $assoc_args['author'] ) ) {
			if ( ! get_userdata( $assoc_args['author'] ) ) {
				WP_CLI::error(
					sprintf(
						// translators: 1: --author argumnet.
						__( 'Argument Error: User ID %s does not exist.', 'wp-cli-csv-commands' ),
						$assoc_args['author']
					)
				);
			} else {
				$this->author = $assoc_args['author'];
			}
		} elseif ( isset( $assoc_args['author'] ) && is_string( $assoc_args['author'] ) ) {
			$author_id = username_exists( $assoc_args['author'] );
			if ( ! author_id ) {
				WP_CLI::error(
					sprintf(
						// translators: 1: --author argument.
						__( 'Argument Error: User Name %s does not exist.', 'wp-cli-csv-commands' ),
						$assoc_args['author']
					)
				);
			} else {
				$this->author = $author_id;
			}
		}

		$this->verbose    = WP_CLI\Utils\get_flag_value( $assoc_args, 'verbose', false );
		$this->csv_strict = WP_CLI\Utils\get_flag_value( $assoc_args, 'strict', false );
		$this->csv_header = WP_CLI\Utils\get_flag_value( $assoc_args, 'header', true );

		if ( isset( $assoc_args['dry-run'] ) ) {
			if ( true !== $assoc_args['dry-run'] ) {
				if ( ! $this->is_string_an_int( $assoc_args['dry-run'] ) ) {
					WP_CLI::error( 'Argument Error: Need an integer value for dry-run.' );
				}
				$this->dry_run_n = intval( $assoc_args['dry-run'] );
			}
			$this->dry_run = true;
		}

		if ( isset( $assoc_args['delimiter'] ) ) {
			$this->csv_delim = $assoc_args['delimiter'];
		}

		if ( isset( $assoc_args['enclosure'] ) ) {
			$this->csv_delim = $assoc_args['enclosure'];
		}

		if ( isset( $assoc_args['escape'] ) ) {
			$this->csv_delim = $assoc_args['escape'];
		}

		if ( isset( $assoc_args['mapping'] ) ) {
			$this->mapping_file = $assoc_args['mapping'];
		}

		if ( 'post_type' === $assoc_args['type'] ) {
			if ( post_type_exists( $assoc_args['name'] ) ) {
				$this->post_type = $assoc_args['name'];
			} else {
				WP_CLI::error(
					sprintf(
					// translators: 1: --name argument.
						__( 'Argument Error: Post type %s does not exist.', 'wp-cli-csv-commands' ),
						$assoc_args['name']
					)
				);
			}
		} elseif ( 'taxonomy' === $assoc_args['type'] ) {
			if ( taxonomy_exists( $assoc_args['name'] ) ) {
				$this->taxonomy = $assoc_args['name'];
			} else {
				WP_CLI::error(
					sprintf(
						// translators: 1: --name argument.
						__( 'Argument Error: Taxonomy %s does not exist.', 'wp-cli-csv-commands' ),
						$assoc_args['name']
					)
				);
			}
		} else {
			WP_CLI::error(
				sprintf(
					// translators: 1: --type argument.
					__( 'Argument Error: Invalid type: %s. Must be one of post_type or taxonomy', 'wp-cli-csv-commands' ),
					$assoc_args['type']
				)
			);
		}

		if ( isset( $assoc_args['status'] ) ) {
			if ( null === $this->post_type ) {
				WP_CLI::error( 'Argument Error: --status argument is valid only when --type is post_type' );
			}
			if ( ! in_array( $assoc_args['status'], get_post_stati(), true ) ) {
				WP_CLI::error(
					sprintf(
						// translators: 1: --status argument.
						__( 'Argument Error: Status %s is invalid.', 'wp-cli-csv-commands' ),
						$assoc_args['status']
					)
				);
			}
			$this->status = $assoc_args['status'];
		}

		if ( isset( $args[0] ) ) {
			$this->filename = $args[0];
		} else {
			WP_CLI::error( 'Argument Error: File not specified.' );
		}
	}

	/**
	 * Determines wether or not a string is just an integer
	 *
	 * @param string $val - the string.
	 * @return boolean
	 */
	private function is_string_an_int( $val ) {
		return preg_match( '/^\d+$/', $val );
	}
}
